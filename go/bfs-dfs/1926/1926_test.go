package jzoffer

import "testing"

func Test_nearestExit(t *testing.T) {
	type args struct {
		maze     [][]byte
		entrance []int
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		// [[".",".",".",".",".","+",".",".","."],[".","+",".",".",".",".",".",".","."],[".",".","+",".","+",".","+",".","+"],[".",".",".",".","+",".",".",".","."],
		//  [".",".",".",".","+","+",".",".","."],["+",".",".",".",".",".",".",".","."],[".",".",".","+",".",".",".",".","."],[".",".",".","+",".",".",".",".","+"],
		//  ["+",".",".","+",".","+","+",".","."]]
		// [8,4]
		{
			name: "2",
			args: args{
				maze: [][]byte{
					{'.', '.', '.', '.', '.', '+', '.', '.', '.'},
					{'.', '+', '.', '.', '.', '.', '.', '.', '.'},
					{'.', '.', '+', '.', '+', '.', '+', '.', '+'},
					{'.', '.', '.', '.', '+', '.', '.', '.', '.'},
					{'.', '.', '.', '.', '+', '+', '.', '.', '.'},
					{'+', '.', '.', '.', '.', '.', '.', '.', '.'},
					{'.', '.', '.', '+', '.', '.', '.', '.', '.'},
					{'.', '.', '.', '+', '.', '.', '.', '.', '+'},
					{'+', '.', '.', '+', '.', '+', '+', '.', '.'},
				},
				entrance: []int{8, 4},
			},
			want: 5,
		},
		{
			name: "1",
			args: args{
				// [["+","+",".","+"],[".",".",".","+"],["+","+","+","."]]
				maze: [][]byte{
					{'+', '+', '.', '+'},
					{'.', '.', '.', '+'},
					{'+', '+', '+', '.'},
				},
				entrance: []int{1, 2},
			},
			want: 1,
		},
	}
	for _, v := range tests {
		t.Run(v.name, func(t *testing.T) {
			if got := nearestExit(v.args.maze, v.args.entrance); got != v.want {
				t.Errorf("nearestExit() = %v, want %v", got, v.want)
			}
		})
	}
}
